@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization;

<h1>Top Players</h1>

<label for="leagueSelect">Select League:</label>
<select id="leagueSelect" @onchange="OnLeagueChange">
    @foreach (var league in leagues)
    {
        <option value="@league.Id">@league.Name</option>
    }
</select>

<button @onclick="GetTopScorers">Get Top Scorers</button>
<button @onclick="GetTopAssists">Get Top Assisters</button>
@if (topPlayers == null)
{
    <p>No data available</p>
}
else
{
    @if (isTopScorers)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Team</th>
                    <th>Player</th>
                    <th>Goals</th>
                    <th>Assists</th>
                    <th>Appearances</th>
                    <th>Goals per 90</th>
                    <th>Minutes per Goal</th>
                    <th>Total Shots</th> <!-- New Column -->
                    <th>Goal Conversion (%)</th>
                    <th>Shot Accuracy (%)</th> <!-- New Column -->
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < topPlayers.Count; i++)
                {
                    var player = topPlayers[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>
                            <img src="@player.Team.Logo" alt="Team Logo" width="40" height="40" />
                        </td>
                        <td>
                            <strong>@player.Player.Name</strong><br />
                            <span style="color: gray; font-size: smaller;">@player.Team.Name</span>
                        </td>
                        <td><strong>@player.Statistics.Goals.Total</strong></td>
                        <td>@player.Statistics.Goals.Assists</td>
                        <td>@player.Statistics.Games.Appearances</td>
                        <td>@player.GoalsPer90</td>
                        <td>@player.MinutesPerGoal</td>
                        <td>@player.Statistics.Shots.Total</td> <!-- Total Shots -->
                        <td>@player.GoalConversion</td>
                        <td>
                            @if (player.Statistics.Shots.Total > 0)
                            {
                                @Math.Round((player.Statistics.Shots.On ?? 0) / (double)player.Statistics.Shots.Total * 100, 2)
                            }
                            else
                            {
                                
                            }
                        </td> <!-- Shot Accuracy -->
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Team</th>
                    <th>Player</th>
                    <th>Assists</th>
                    <th>Goals</th>
                    <th>Appearances</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < topPlayers.Count; i++)
                {
                    var player = topPlayers[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>
                            <img src="@player.Team.Logo" alt="Team Logo" width="40" height="40" />
                        </td>
                        <td>
                            <strong>@player.Player.Name</strong><br />
                            <span style="color: gray; font-size: smaller;">@player.Team.Name</span>
                        </td>
                        <td><strong>@player.Statistics.Goals.Assists</strong></td>
                        <td>@player.Statistics.Goals.Total</td>
                        <td>@player.Statistics.Games.Appearances</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {
    private List<TopScorer> topPlayers; // List for both scorers and assisters
    private bool isTopScorers = true; // Flag to determine the data type
    private List<League> leagues = new List<League>
    {
        new League { Id = 39, Name = "Premier League" },
        new League { Id = 140, Name = "La Liga" },
        new League { Id = 78, Name = "Bundesliga" },
        new League { Id = 135, Name = "Serie A" },
        new League { Id = 61, Name = "Ligue 1" }
    };
    private int selectedLeagueId = 39; // Default to Premier League

    private async Task GetTopScorers()
    {
        isTopScorers = true; // Set the flag for scorers
        await FetchTopPlayers("topscorers"); // Fetch top scorers
    }

    private async Task GetTopAssists()
    {
        isTopScorers = false; // Set the flag for assisters
        await FetchTopPlayers("topassists"); // Fetch top assisters
    }

    private async Task FetchTopPlayers(string endpoint)
    {
        try
        {
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-rapidapi-key", "a88ccbd61bmsh35c661edd43fe77p1306f3jsn6e51e1e2b869");
            client.DefaultRequestHeaders.Add("x-rapidapi-host", "api-football-v1.p.rapidapi.com");

            string url = $"https://api-football-v1.p.rapidapi.com/v3/players/{endpoint}?league={selectedLeagueId}&season=2024";
            var response = await client.GetStringAsync(url);
            var apiResponse = JsonSerializer.Deserialize<ApiResponse>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            topPlayers = apiResponse?.Response?.Select((r, index) => new TopScorer
                {
                    Player = r.Player,
                    Team = r.Statistics.FirstOrDefault()?.Team,
                    Statistics = new PlayerStatistics
                    {
                        Goals = r.Statistics.FirstOrDefault()?.Goals,
                        Games = r.Statistics.FirstOrDefault()?.Games,
                        Shots = r.Statistics.FirstOrDefault()?.Shots
                    }
                }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void OnLeagueChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int leagueId))
        {
            selectedLeagueId = leagueId;
        }
    }

    private class ApiResponse
    {
        public List<ApiResponseItem> Response { get; set; }
    }

    private class ApiResponseItem
    {
        public Player Player { get; set; }
        public List<Statistics> Statistics { get; set; }
    }

    private class Player
    {
        public string Name { get; set; }
        public string Photo { get; set; }
    }

    private class Statistics
    {
        public Team Team { get; set; }
        public Goals Goals { get; set; }
        public Games Games { get; set; }
        public Shots Shots { get; set; }
    }

    private class Team
    {
        public string Name { get; set; }
        public string Logo { get; set; }
    }

    private class Goals
    {
        public int Total { get; set; }
        public int? Assists { get; set; }
    }

    private class Games
    {
        [JsonPropertyName("appearences")]
        public int Appearances { get; set; }
    }

    private class Shots
    {
        public int? Total { get; set; }
        public int? On { get; set; }
    }

    private class PlayerStatistics
    {
        public Goals Goals { get; set; }
        public Games Games { get; set; }
        public Shots Shots { get; set; }
    }

    private class TopScorer
    {
        public Player Player { get; set; }
        public Team Team { get; set; }
        public PlayerStatistics Statistics { get; set; }

        public double GoalsPer90 => Statistics?.Games?.Appearances > 0 && Statistics?.Games?.Appearances * 90 > 0
            ? Math.Round((Statistics.Goals.Total * 90.0) / (Statistics.Games.Appearances * 90), 2)
            : 0;

        public double? MinutesPerGoal => Statistics?.Goals?.Total > 0
            ? Math.Round((Statistics.Games.Appearances * 90.0) / Statistics.Goals.Total, 2)
            : (double?)null;

        public double? GoalConversion => Statistics?.Shots?.Total > 0
            ? Math.Round((Statistics.Goals.Total / (double)Statistics.Shots.Total) * 100, 2)
            : (double?)null;
    }

    private class League
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
