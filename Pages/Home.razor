@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization;

<h1>Top Players</h1>

<label for="leagueSelect">Select League:</label>
<select id="leagueSelect" @onchange="OnLeagueChange">
    @foreach (var league in leagues)
    {
        <option value="@league.Id">@league.Name</option>
    }
</select>

@if (selectedLeague != null)
{
    <h2>@selectedLeague.Name</h2>
    <img src="@selectedLeague.Logo" alt="@selectedLeague.Name Logo" width="100" />
    <img src="@selectedLeague.Flag" alt="@selectedLeague.Country Flag" width="50" />
}

<div class="button-container">
    <button class="custom-button @(isTopScorers ? "active" : "")"
            @onclick="GetTopScorers">
        Top Scorers
    </button>
    <button class="custom-button @(!isTopScorers ? "active" : "")"
            @onclick="GetTopAssists">
        Top Assists
    </button>
</div>

@if (topPlayers == null)
{
    <p>No data available</p>
}
else
{
    @if (isTopScorers)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Team</th>
                    <th>Player</th>
                    <th>Goals</th>
                    <th>Assists</th>
                    <th>Appearances</th>
                    <th>Goals per 90</th>
                    <th>Minutes per Goal</th>
                    <th>Total Shots</th>
                    <th>Goal Conversion (%)</th>
                    <th>Shot Accuracy (%)</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < topPlayers.Count; i++)
                {
                    var player = topPlayers[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>
                            <img src="@player.Team.Logo" alt="Team Logo" width="40" height="40" />
                        </td>
                        <td>
                            <strong>@player.Player.Name</strong><br />
                            <span style="color: gray; font-size: smaller;">@player.Team.Name</span>
                        </td>
                        <td><strong>@player.Statistics.Goals.Total</strong></td>
                        <td>@player.Statistics.Goals.Assists</td>
                        <td>@player.Statistics.Games.Appearances</td>
                        <td>@Math.Round(player.GoalsPer90, 2)</td>
                        <td>@Math.Round(player.MinutesPerGoal, 2)</td>
                        <td>@player.Statistics.Shots.Total</td>
                        <td>@Math.Round(player.GoalConversion, 2)</td>
                        <td>
                            @if (player.Statistics.Shots.Total > 0)
                            {
                                @Math.Round((player.Statistics.Shots.On ?? 0) / (double)player.Statistics.Shots.Total * 100, 2)
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Team</th>
                    <th>Player</th>
                    <th>Assists</th>
                    <th>Goals</th>
                    <th>Appearances</th>
                    <th>Total Passes</th>
                    <th>Key Passes</th>
                    <th>Assists per 90</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < topPlayers.Count; i++)
                {
                    var player = topPlayers[i];
                    <tr>
                        <td>@(i + 1)</td>
                        <td>
                            <img src="@player.Team.Logo" alt="Team Logo" width="40" height="40" />
                        </td>
                        <td>
                            <strong>@player.Player.Name</strong><br />
                            <span style="color: gray; font-size: smaller;">@player.Team.Name</span>
                        </td>
                        <td><strong>@player.Statistics.Goals.Assists</strong></td>
                        <td>@player.Statistics.Goals.Total</td>
                        <td>@player.Statistics.Games.Appearances</td>
                        <td>@player.Statistics.Passes.Total</td>
                        <td>@player.Statistics.Passes.Key</td>
                        <td>@Math.Round(player.AssistsPer90, 2)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<TopScorer> topPlayers;
    private bool isTopScorers = true;
    private List<League> leagues = new List<League>
    {
        new League { Id = 39, Name = "Premier League", Logo = "https://media.api-sports.io/football/leagues/39.png", Flag = "https://media.api-sports.io/flags/gb-eng.svg" },
        new League { Id = 140, Name = "La Liga", Logo = "https://media.api-sports.io/football/leagues/140.png", Flag = "https://media.api-sports.io/flags/es.svg" },
        new League { Id = 78, Name = "Bundesliga", Logo = "https://media.api-sports.io/football/leagues/78.png", Flag = "https://media.api-sports.io/flags/de.svg" },
        new League { Id = 135, Name = "Serie A", Logo = "https://media.api-sports.io/football/leagues/135.png", Flag = "https://media.api-sports.io/flags/it.svg" },
        new League { Id = 61, Name = "Ligue 1", Logo = "https://media.api-sports.io/football/leagues/61.png", Flag = "https://media.api-sports.io/flags/fr.svg" }
    };
    private League selectedLeague;
    private int selectedLeagueId = 39;

    protected override async Task OnInitializedAsync()
    {
        selectedLeague = leagues.FirstOrDefault(l => l.Id == selectedLeagueId);
        await GetTopScorers(); // Automatically load Top Scorers data
    }

    private async Task GetTopScorers()
    {
        isTopScorers = true;
        await FetchTopPlayers("topscorers");
    }

    private async Task GetTopAssists()
    {
        isTopScorers = false;
        await FetchTopPlayers("topassists");
    }

    private async Task FetchTopPlayers(string endpoint)
    {
        try
        {
            using var client = new HttpClient();
            // Set the headers with the new API key and host
            client.DefaultRequestHeaders.Add("x-rapidapi-key", "22f289cb1982db561c68e750a8a3a90a");
            client.DefaultRequestHeaders.Add("x-rapidapi-host", "v3.football.api-sports.io");

            // Update the URL for the "players/topscorers" endpoint
            string url = $"https://v3.football.api-sports.io/players/topscorers?league={selectedLeagueId}&season={2021}";

            var response = await client.GetStringAsync(url);
            var apiResponse = JsonSerializer.Deserialize<ApiResponse>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            topPlayers = apiResponse?.Response?.Select((r, index) => new TopScorer
                {
                    Player = r.Player,
                    Team = r.Statistics.FirstOrDefault()?.Team,
                    Statistics = new PlayerStatistics
                    {
                        Goals = r.Statistics.FirstOrDefault()?.Goals,
                        Games = r.Statistics.FirstOrDefault()?.Games,
                        Shots = r.Statistics.FirstOrDefault()?.Shots,
                        Passes = r.Statistics.FirstOrDefault()?.Passes
                    }
                }).ToList();

            if (isTopScorers)
            {
                topPlayers = topPlayers.OrderByDescending(p => p.Statistics.Goals.Total).ToList();
            }
            else
            {
                topPlayers = topPlayers.OrderByDescending(p => p.Statistics.Goals.Assists ?? 0).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void OnLeagueChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int leagueId))
        {
            selectedLeagueId = leagueId;
            selectedLeague = leagues.FirstOrDefault(l => l.Id == selectedLeagueId);
        }
    }

    private class ApiResponse
    {
        public List<ApiResponseItem> Response { get; set; }
    }

    private class ApiResponseItem
    {
        public Player Player { get; set; }
        public List<Statistics> Statistics { get; set; }
    }

    private class Player
    {
        public string Name { get; set; }
        public string Photo { get; set; }
    }

    private class Statistics
    {
        public Team Team { get; set; }
        public Goals Goals { get; set; }
        public Games Games { get; set; }
        public Shots Shots { get; set; }
        public Passes Passes { get; set; }
    }

    private class Team
    {
        public string Name { get; set; }
        public string Logo { get; set; }
    }

    private class Goals
    {
        public int Total { get; set; }
        public int? Assists { get; set; }
    }

    private class Games
    {
        [JsonPropertyName("appearences")]
        public int Appearances { get; set; }

        public int Minutes => Appearances * 90; // Calculate minutes directly based on appearances
    }

    private class Shots
    {
        public int? Total { get; set; }
        public int? On { get; set; }
    }

    private class Passes
    {
        public int? Total { get; set; }
        public int? Key { get; set; }
    }

    private class PlayerStatistics
    {
        public Goals Goals { get; set; }
        public Games Games { get; set; }
        public Shots Shots { get; set; }
        public Passes Passes { get; set; }
    }

    private class TopScorer
    {
        public Player Player { get; set; }
        public Team Team { get; set; }
        public PlayerStatistics Statistics { get; set; }

        public double GoalsPer90 => Statistics?.Goals?.Total > 0 && Statistics?.Games?.Minutes > 0
            ? (Statistics.Goals.Total / (double)Statistics.Games.Minutes) * 90
            : 0;

        public double MinutesPerGoal => Statistics?.Goals?.Total > 0 && Statistics?.Games?.Minutes > 0
            ? Statistics.Games.Minutes / (double)Statistics.Goals.Total
            : 0;

        public double AssistsPer90 => Statistics?.Goals?.Assists > 0 && Statistics?.Games?.Minutes > 0
            ? (Statistics.Goals.Assists.Value / (double)Statistics.Games.Minutes) * 90
            : 0;

        public double GoalConversion => Statistics?.Shots?.Total > 0
            ? (Statistics.Goals.Total / (double)Statistics.Shots.Total) * 100
            : 0;
    }

    private class League
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Logo { get; set; }
        public string Flag { get; set; }
        public string Country { get; set; }
    }
}

<style>

    /* Center alignment for the button container */
    .button-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        margin: 20px 0; /* Add spacing above and below */
        gap: 20px; /* Space between buttons */
    }

    /* Base button style */
    .custom-button {
        background-color: #ffffff; /* White background */
        color: #333333; /* Dark text */
        border: none; /* Remove borders */
        border-radius: 0; /* No rounded corners */
        padding: 10px 25px; /* Button size */
        font-size: 16px; /* Text size */
        font-weight: bold; /* Bold text */
        cursor: pointer; /* Pointer cursor on hover */
        position: relative; /* Needed for underline effect */
        outline: none; /* Remove default focus styles */
        transition: color 0.3s ease; /* Smooth text color transition */
        text-align: center; /* Ensure text is centered */
    }

        /* Hover effect with underline */
        .custom-button::after {
            content: ''; /* Pseudo-element for the underline */
            display: block;
            position: absolute;
            bottom: -5px; /* Position underline slightly below the button */
            left: 50%; /* Start from the center */
            width: 0; /* Initially no width */
            height: 3px; /* Height of the underline */
            background-color: #4CAF50; /* Green underline */
            transition: width 0.3s ease, left 0.3s ease; /* Smooth underline expansion */
        }

        /* Expand underline on hover */
        .custom-button:hover::after {
            width: 100%; /* Full width on hover */
            left: 0; /* Align to start */
        }

        /* Active button state */
        .custom-button.active {
            color: #4CAF50; /* Green text for active */
            font-weight: bold; /* Highlight active button text */
        }

            .custom-button.active::after {
                width: 100%; /* Full underline for active */
                left: 0; /* Align underline to start */
            }

        /* Subtle hover color change for text */
        .custom-button:hover {
            color: #4CAF50; /* Green text on hover */
        }

</style>
