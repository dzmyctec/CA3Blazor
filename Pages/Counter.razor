@page "/counter"
@using System.Text.Json
@using System.Text.Json.Serialization;

<PageTitle>Football League Table</PageTitle>

<h1>Football League Table</h1>

<label for="leagueSelect">Select League:</label>
<select id="leagueSelect" @onchange="OnLeagueChange">
    @foreach (var league in leagues)
    {
        <option value="@league.Id">@league.Name</option>
    }
</select>

@if (standings == null)
{
    <p>Loading standings data...</p>
}
else
{
    <h2>@standings.League.Name (@standings.League.Season)</h2>
    <img src="@standings.League.Logo" alt="@standings.League.Name Logo" width="100" />
    <img src="@standings.League.Flag" alt="@standings.League.Country Flag" width="50" />
    <table class="table">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Team</th>
                <th>Points</th>
                <th>Goal Difference</th>
                <th>Form</th>
                <th>Played</th>
                <th>Wins</th>
                <th>Draws</th>
                <th>Losses</th>
                <th>Goals For</th>
                <th>Goals Against</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in standings.League.Standings.FirstOrDefault() ?? Enumerable.Empty<TeamStanding>())
            {
                <tr>
                    <td>@team.Rank</td>
                    <td>
                        <img src="@team.Team.Logo" alt="@team.Team.Name Logo" width="40" />
                        @team.Team.Name
                    </td>
                    <td>@team.Points</td>
                    <td>@team.GoalsDiff</td>
                    <td>@team.Form</td>
                    <td>@team.All.Played</td>
                    <td>@team.All.Win</td>
                    <td>@team.All.Draw</td>
                    <td>@team.All.Lose</td>
                    <td>@team.All.Goals.For</td>
                    <td>@team.All.Goals.Against</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<League> leagues = new List<League>
    {
        new League { Id = 39, Name = "Premier League" },
        new League { Id = 140, Name = "La Liga" },
        new League { Id = 78, Name = "Bundesliga" },
        new League { Id = 135, Name = "Serie A" },
        new League { Id = 61, Name = "Ligue 1" }
    };

    private int selectedLeagueId = 39; // Default to Premier League
    private StandingsResponse standings;

    protected override async Task OnInitializedAsync()
    {
        await LoadStandings();
    }

    private async Task LoadStandings()
    {
        try
        {
            using var client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-rapidapi-key", "22f289cb1982db561c68e750a8a3a90a");
            client.DefaultRequestHeaders.Add("x-rapidapi-host", "v3.football.api-sports.io");

            string url = $"https://v3.football.api-sports.io/standings?league={selectedLeagueId}&season=2021";
            var response = await client.GetStringAsync(url);

            var apiResponse = JsonSerializer.Deserialize<ApiResponse>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            // Debugging output
            Console.WriteLine(JsonSerializer.Serialize(apiResponse, new JsonSerializerOptions { WriteIndented = true }));

            standings = apiResponse.Response.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading standings: {ex.Message}");
        }
    }

    private void OnLeagueChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int leagueId))
        {
            selectedLeagueId = leagueId;
            standings = null; // Reset standings while loading
            _ = LoadStandings(); // Reload standings for the selected league
        }
    }

    private class League
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    private class ApiResponse
    {
        public List<StandingsResponse> Response { get; set; }
    }

    private class StandingsResponse
    {
        public LeagueInfo League { get; set; }
    }

    private class LeagueInfo
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Country { get; set; }
        public string Logo { get; set; }
        public string Flag { get; set; }
        public int Season { get; set; }
        public List<List<TeamStanding>> Standings { get; set; }
    }

    private class TeamStanding
    {
        public int Rank { get; set; }
        public TeamInfo Team { get; set; }
        public int Points { get; set; }
        public int GoalsDiff { get; set; }
        public string Form { get; set; }
        public OverallStats All { get; set; }
    }

    private class TeamInfo
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Logo { get; set; }
    }

    private class OverallStats
    {
        public int Played { get; set; }
        public int Win { get; set; }
        public int Draw { get; set; }
        public int Lose { get; set; }
        public GoalsInfo Goals { get; set; }
    }

    private class GoalsInfo
    {
        public int For { get; set; }
        public int Against { get; set; }
    }
}
